<?php/** * Created by 七月. * Author: 七月 * 微信公号：小楼昨夜又秋风 * 知乎ID: 七月在夏天 * Date: 2017/2/26 * Time: 14:15 */namespace app\api\controller\v1;use think\Controller;use think\Loader;use think\Db;use app\admin\model\Order as OrderModel;Loader::import('WxPay.WxPay', EXTEND_PATH, '.Api.php');class Pay extends Controller{   public function DoPay() {            //订单号        // $order=$_GET['orderNo'];        $order = input('orderNo');//time();        $money=$_GET['money']*100;        //     初始化值对象        $input = new \WxPayUnifiedOrder();        //     文档提及的参数规范：商家名称-销售商品类目        $input->SetBody("长阳集");        //     订单号应该是由小程序端传给服务端的，在用户下单时即生成，demo中取值是一个生成的时间戳        $input->SetOut_trade_no("$order");        //     费用应该是由小程序端传给服务端的，在用户下单时告知服务端应付金额，demo中取值是1，即1分钱        $input->SetTotal_fee("$money");//        $input->SetNotify_url("https://jijikeji.cn/api/v1/notifyUrlApi");        $input->SetNotify_url("https://ceshi.bjdingzhicheng.com/api/v1/notifyUrlApi");        $input->SetTrade_type("JSAPI");        //     由小程序端传给服务端        $input->SetOpenid(input('openid'));        //     向微信统一下单，并返回order，它是一个array数组        $order = \WxPayApi::unifiedOrder($input);        //     json化返回给小程序端        header("Content-Type: application/json");        echo json_encode($order);  }    public function yuePay() {        try {            // 拼接参数            if (isset($_GET['openid']) && $_GET['openid']) {                $openId = $_GET['openid'];            } else {                throw new \Exception("操作失败，缺少参数");            }            // 拼接参数            if (isset($_GET['orderNo']) && $_GET['orderNo']) {                $orderNo = $_GET['orderNo'];            } else {                throw new \Exception("操作失败，缺少参数");            }            // 拼接参数            if (isset($_GET['uid']) && $_GET['uid']) {                $uid = $_GET['uid'];            } else {                throw new \Exception("操作失败，缺少参数");            }            // 拼接参数            if (isset($_GET['paytype']) && $_GET['paytype']) {                $type = $_GET['paytype'];            } else {                throw new \Exception("操作失败，缺少参数");            }            $orderType = Db::name('order')->where('id',$orderNo)->value('orderCate');            $money     = Db::name('order')->where('id',$orderNo)->value('realTotalMoney');            $userInfo  = Db::name('user')->where(['id'=>$uid,'openId'=>$openId])->find();            if (!$userInfo) {                throw new \Exception("操作失败，用户信息不匹配");            }            $datas = [];            // 余额支付            if ($type == 1) {                if ($orderType == 3) {                    $money = Db::name('order')->where('id',$orderNo)->value('yunfei');                }                $userMoney = $userInfo['money'];                if ($userMoney < $money) {                    throw new \Exception("操作失败，余额不足");                }                $newsMoney = $userMoney - $money;                $datas['money']     = $newsMoney;            // 不可提现金额支付            } else if ($type == 3) {                $userMoney = $userInfo['noMoney'];                if ($userMoney < $money) {                    throw new \Exception("操作失败，余额不足");                }                $newsMoney = $userMoney - $money;                $datas['noMoney']     = $newsMoney;            }            $res = Db::name('user')->where(['id'=>$uid,'openId'=>$openId])->update($datas);            if ($res) {                return json_encode(['code'=>'1001','meg'=>'付款成功','data'=>null]);            } else {                return json_encode(['code'=>'1025','meg'=>'操作失败，服务器错误','data'=>null]);            }        } catch (\Exception $e) {            // Db::rollback();            return json_encode(['code'=>'1025','meg'=>$e->getMessage(),'data'=>null]);        }    }    public function notifyUrlApi()    {        $postXml = $GLOBALS["HTTP_RAW_POST_DATA"]; //接收微信参数        libxml_disable_entity_loader(true);        $data = json_decode(json_encode(simplexml_load_string($postXml, 'SimpleXMLElement', LIBXML_NOCDATA)), true);        $order_sn  = $data['out_trade_no'];            // 订单单号        $openid    = $data['openid'];                  // 付款人openID        $total_fee = ($data['total_fee'])/100;         // 付款金额        $transaction_id = $data['transaction_id'];     // 微信支付流水号        // error_log(json_encode($data)); exit;        //查找订单        $order = Db::name('order')        ->field('userId,status,orderCate,cardType')        ->where('status', 0)         // 订单状态 0未支付 1支付成功 2取消订单        ->where('id', $order_sn)        ->find();        // error_log(json_encode($order)); exit;        $payType  = 2;        $cartType = 0;        if ($order['orderCate'] == 1) {            $cartType = 1;        }        $result = OrderModel::SetOrderDetail($order_sn, $payType, $cartType,$order['orderCate'],$order['cardType']);        $str  = '';        // 返回状态给微信服务器        if ($result) {            $str='<xml><return_code><![CDATA[SUCCESS]]></return_code><return_msg><![CDATA[OK]]></return_msg></xml>';        }else{            $str='<xml><return_code><![CDATA[FAIL]]></return_code><return_msg><![CDATA[签名失败]]></return_msg></xml>';        }        return $str;    }    public function test()    {        echo 'aaa';    }    /**回调修改2018-12-24**/    // public function notifyUrlApi() {    //     // Db::name('teacher')->insert(['aaa'=>'123']);    //     // die();    //     //$xml = post_data();    //     // $xml = file_get_contents('php://input', 'r');    //     $xml = '';    //     //将服务器返回的XML数据转化为数组    //     $data = $this->toArray($xml);    //     // 判断签名是否正确  判断支付状态    //     if (($data['return_code'] == 'SUCCESS') && ($data['result_code'] == 'SUCCESS')) {    //         $result = $data;    //         //获取服务器返回的数据    //         $order_sn  = $data['out_trade_no'];            // 订单单号    //         $openid    = $data['openid'];                  // 付款人openID    //         $total_fee = ($data['total_fee'])/100;         // 付款金额    //         $transaction_id = $data['transaction_id'];     // 微信支付流水号    //         //查找订单    //         $order = Db::name('order')    //         ->field('userid,status,order_type')    //         ->where('status', 0)         // 订单状态 0未支付 1支付成功 2取消订单    //         ->where('order_no', $order_sn)    //         ->find();    //         if($order) {   // 订单是否存在    //             Db::startTrans();    //             try {    //                 Db::name('order')   // 更新订单状态(order)    //                     ->where('order_no', $order_sn)    //                     ->update(['transaction_no' => $transaction_id, 'status' => 1]);    //                 if ($order['order_type'] == 0) {        // 更新圈子总金额    //                     $order_recharge_record = Db::name('order_recharge_record')    //                         ->where('order_no', $order_sn)    //                         ->find();    //                     Db::name('circle')    //                         ->where('id', $order_recharge_record['circleid'])    //                         ->setInc('total_amount', $total_fee);    //                 } else if ($order['order_type'] == 1) {    // 更新用户金额    //                     Db::name('user')    //                         ->where('id', $order['userid'])    //                         ->setInc('balance', $total_fee);    //                 } else if ($order['order_type'] == 2) {    // 更新任务状态    //                     $order_recharge_record = Db::name('order_recharge_record')    //                         ->where('order_no', $order_sn)    //                         ->find();    //                     $task_ok_UPDATE['ok']      = 1;    //                     $task_ok_UPDATE['ok_time'] = time();    //                     // 更新任务表    //                     Db::name('task')    //                         ->where('task_no', $order_recharge_record['taskno'])    //                         ->update($task_ok_UPDATE);    //                     // 更新任务详细记录表    //                     Db::name('task_record')    //                         ->where('task_no', $order_recharge_record['taskno'])    //                         ->update($task_ok_UPDATE);    //                 }else if ($order['order_type'] == 3) {    // 更新vip状态    //                     $order_recharge_record = Db::name('order_recharge_record')    //                         ->where('order_no', $order_sn)    //                         ->find();    //                     $task_ok_UPDATE['ok']      = 1;    //                     $task_ok_UPDATE['ok_time'] = time();    //                     // 更新任务表    //                     Db::name('user_vip')    //                         ->where('vip_no', $order_recharge_record['vip_no'])    //                         ->update($task_ok_UPDATE);    //                     // 更新任务详细记录表    //                     Db::name('user_vip_record')    //                         ->where('vip_no', $order_recharge_record['vip_no'])    //                         ->update($task_ok_UPDATE);    //                     $Vipuserid = Db::name('user_vip_record')->field(true)->where('vip_no', $order_recharge_record['vip_no'])->select();    //                     $user_WHERE['id'] = ['in', array_column($Vipuserid, 'userid')];    //                     Db::name('user')->where($user_WHERE)->update(['vip' => 1]);    //                 }else if ($order['order_type'] == 4) {    // 更新红包状态    //                     $order_recharge_record = Db::name('order_recharge_record')    //                         ->where('order_no', $order_sn)    //                         ->find();    //                     $task_ok_UPDATE['ok']      = 1;    //                     $task_ok_UPDATE['ok_time'] = time();    //                     // 更新任务表    //                     Db::name('redpacket')    //                         ->where('red_id', $order_recharge_record['red_id'])    //                         ->update($task_ok_UPDATE);    //                 }    //                 Db::commit();    //             }catch (Exception $e) {    //                 $result = false;    //                 Db::rollback();    //             }    //             //$update['total_fee'] = $total_fee;             // 保存支付成功的金额    //             // $update['transaction_no'] = $transaction_id;   // 保存支付商户号对应的ID号    //             // $update['status'] = 1;                         // 订单状态 0未支付 1支付成功 2取消订单    //             // /**更新订单**/    //             // Db::name('order')    //             // ->where('status', 0)         // 订单状态 0未支付 1支付成功 2取消订单    //             // ->where('order_no', $order_sn)    //             // ->update($update);    //         }else{      // 订单不存在    //             $result = false;    //         }    //     }else {    //         $result = false;    //     }    //     // 返回状态给微信服务器    //     if ($result) {    //         $str='<xml><return_code><![CDATA[SUCCESS]]></return_code><return_msg><![CDATA[OK]]></return_msg></xml>';    //     }else{    //         $str='<xml><return_code><![CDATA[FAIL]]></return_code><return_msg><![CDATA[签名失败]]></return_msg></xml>';    //     }    //     echo $str;    //     return $result;    // }    public static function toArray($xml) {        //禁止引用外部xml实体        libxml_disable_entity_loader(true);        $result= json_decode(json_encode(simplexml_load_string($xml, 'SimpleXMLElement', LIBXML_NOCDATA)), true);        return $result;    }}